# -*- coding: utf-8 -*-
"""02_cross-validation_shared.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X1-eSSPRNGh2dHTlkbYlJX4VsgFNLpup
"""

# Import scikit-learn libraries
from sklearn.model_selection import KFold
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# create the range 1 to 100 (data samples)
rn = range(1,101)

for i in rn:
  print(i)

# KFold function returns a location (index) of the train and test samples
kf = KFold(n_splits=10, shuffle=True)

# the Kfold function returns the indices of the data. Our range goes from 1-100 so the index is 0-99
for train_index in kf.split(rn):
    print(train_index)

for train_index, test_index in kf.split(rn):
    print(test_index)

# to get the values from our data, we use np.take() to access a value at particular index
for train_index, test_index in kf.split(rn):
    print(np.take(rn,train_index), np.take(rn,test_index))

# Let's display the splits on a chart
# (in order to clearly show which data belongs to each set, we will shift the values by -.1 and +.1)

def return_kfold(kf, rn, shift=.1):
    train = pd.DataFrame()
    test = pd.DataFrame()
    i = 1
    for train_index, test_index in kf.split(rn):
        train_df = pd.DataFrame(np.take(rn, train_index), columns=["x"])
        train_df["val"] = i - shift
        train = train.append(train_df)

        test_df = pd.DataFrame(np.take(rn, test_index), columns=["x"])
        test_df["val"] = i + shift
        test = test.append(test_df)
        i += 1
    return train, test

train, test = return_kfold(kf,rn)

fig, ax = plt.subplots()
ax.scatter(x="x",y="val",c="b",label="train",s=15,data=train)
ax.scatter(x="x",y="val",c="r",label="test",s=15,data=test)
ax.set_ylabel("Kfold")
ax.set_xlabel("feature")
ax.set_title("K Folds")
plt.suptitle("Kfold split between train and test features")
plt.legend(bbox_to_anchor=(1.05, 1))
plt.show()