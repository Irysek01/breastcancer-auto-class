# -*- coding: utf-8 -*-
"""04-radiomics_shared.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1my-tIh6FkX_kweqFDlGbanOCphFrpjIK
"""

import os
import numpy as np
import cv2
from matplotlib import pyplot as plt
import pandas as pd # for reading and writing tables

from google.colab import drive

drive.mount('/content/drive')

# Define Drive folder from which data can be downloaded

data_folder = "/content/drive/MyDrive/DeepTraceTechnologies - Dev/Datasets/Breast Ultrasound Images Dataset/IMG-JPG-2CLASSES/"
benign_folder = data_folder + "benign/"
malignant_folder = data_folder + "malignant/"

#define function to  get image number
def num (image) :
    val = 0

    for i in range(len(image)) :
        if image[i] == '(' :
            while True :
                i += 1
                if image[i] == ')' :
                    break
                val = (val*10) + int(image[i])
            break

    return val

def getCountOfImage():
    classes = ['benign', 'malignant','normal']
    label = 0
    labels = []
    benign = 0
    malignant = 0
    for cname in os.listdir(data_folder):
       print(cname)
       for filename in sorted (os.listdir(os.path.join(data_folder,cname))):
           if  not '_mask' in filename :
               if 'benign' in filename :
                benign+=1
               elif 'malignant' in filename:
                 malignant +=1

    return int(benign), int(malignant)

#get count of images
benign, malignant = getCountOfImage()

print(benign)
print(malignant)

size_x ,size_y = 128,128
#create empty array of zeros to store image inside it
study_benign    = np.zeros((benign,size_x,size_y))
mask_benign    = np.zeros((benign,size_x,size_y))
study_malignant = np.zeros((malignant,size_x,size_y))
mask_malignant = np.zeros((malignant,size_x,size_y))

#start load image
                #0        #1
classes = ['benign', 'malignant']
label = 0
labels = [] #for classification part
images = [] #for classification part
for cname in  os.listdir(data_folder):
    for filename in sorted (os.listdir(os.path.join(data_folder,cname))):
        imagePath = data_folder + cname + '/' + filename
        image = cv2.imread(imagePath,cv2.IMREAD_GRAYSCALE)
        if not '_mask' in filename :
            image = cv2.resize(image,(size_x,size_y))
            image = np.array(image)
            images.append(image)
            #image = np.expand_dims(image,axis=-1)
            #load x_benign images
            if filename[0]=='b':
                study_benign[num(filename)-1]+= np.array(image)
                labels.append(int(0))
            if filename[0] == 'm' :
                study_malignant[num(filename)-1]+= np.array(image)
                labels.append(int(1))
        else:
            image = cv2.resize(image,(size_x,size_y))
            image = np.array(image)
            #image = np.expand_dims(image,axis=-1)
            if filename[0] == 'b':
                mask_benign[num(filename)-1]+= np.array(image)
            if filename[0] == 'm' :
                mask_malignant[num(filename)-1]+= np.array(image)

print(np.shape(study_benign))
print(np.shape(mask_benign))

print(np.shape(study_malignant))
print(np.shape(mask_malignant))

"""#Let's show some Benign cases"""

plt.figure(figsize = (20,12))

for i in range(3) :
    plt.subplot(2,3,i+1)
    plt.imshow(np.squeeze(study_benign[i+1]), 'gray')
    plt.title('Benign')
    plt.axis('off')

for i in range(3) :
    plt.subplot(2,3,i+4)
    plt.imshow(np.squeeze(mask_benign[i+1]), 'gray')
    plt.title('Mask')
    plt.axis('off')
plt.show()

"""#And now some Malignant cases"""

plt.figure(figsize = (20,12))

for i in range(3) :
    plt.subplot(2,3,i+1)
    plt.imshow(np.squeeze(study_malignant[i+1]), 'gray')
    plt.title('Malignant')
    plt.axis('off')

for i in range(3) :
    plt.subplot(2,3,i+4)
    plt.imshow(np.squeeze(mask_malignant[i+1]), 'gray')
    plt.title('Mask')
    plt.axis('off')
plt.show()

"""#Collect all studies together"""

studies = (np.concatenate((study_benign, study_malignant), axis = 0))/255
masks = (np.concatenate((mask_benign, mask_malignant), axis = 0))/255
print(studies.shape)
print(masks.shape)

"""#and plot"""

plt.figure(figsize = (20,12))

for i in range(3) :
    plt.subplot(2,3,i+1)
    plt.imshow(np.squeeze(studies[i+1]), 'gray')
    plt.title('Label = ' + str(labels[i+1]))
    plt.axis('off')

for i in range(3) :
    plt.subplot(2,3,i+4)
    plt.imshow(np.squeeze(masks[i+1]), 'gray')
    plt.title('Masks')
    plt.axis('off')
plt.show()

"""#Let's extract readiomic feature through pyradiomics"""

! pip install pyradiomics
from radiomics import featureextractor

# special functions for using pyradiomics
from SimpleITK import GetImageFromArray
import radiomics
from radiomics.featureextractor import RadiomicsFeatureExtractor # This module is used for interaction with pyradiomic
import logging
logging.getLogger('radiomics').setLevel(logging.CRITICAL + 1)  # this tool makes a whole TON of log noise

# Commented out IPython magic to ensure Python compatibility.
# Plot Setup Code
# Setup the defaults to make the plots look a bit nicer for the notebook

# %matplotlib inline
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
plt.rcParams["figure.figsize"] = (8, 8)
plt.rcParams["figure.dpi"] = 125
plt.rcParams["font.size"] = 14
plt.rcParams['font.family'] = ['sans-serif']
plt.rcParams['font.sans-serif'] = ['DejaVu Sans']
plt.style.use('ggplot')
sns.set_style("whitegrid", {'axes.grid': False})

# Define extractor
# https://pyradiomics.readthedocs.io/en/1.1.1/radiomics.html
# https://pyradiomics.readthedocs.io/en/latest/customization.html#radiomics-customization-label
extractor = featureextractor.RadiomicsFeatureExtractor(binCount = 64)

extractor.settings

results = extractor.execute(GetImageFromArray(studies[0]),
                            GetImageFromArray((masks[0]).astype(np.uint8)),
                            label = 1)

pd.DataFrame([results]).T

# Extract features from Benign and Malignant studies
for i in range(len(studies)):
  #print(mask[i].min())
  #print(mask[i].max())
  #print(cv2.countNonZero(mask[i]))
  #print(np.sum(mask[i] == 0))

  print( str(i) + ' of ' + str(len(studies)) )
  features_currentStudy = extractor.execute(GetImageFromArray(studies[i]),
                    GetImageFromArray((masks[i]).astype(np.uint8)),
                    label = 1)

  # Stack DataFrames
  if i == 0:
    extracted_features = pd.DataFrame([features_currentStudy])
  else:
    extracted_features = pd.concat( [extracted_features, pd.DataFrame([features_currentStudy])], ignore_index=True )

"""##What do we have now?"""

print(extracted_features.shape)
print(np.array(labels).shape)

# Le'ts focus on a some features
value_feature_names = [c_col for c_col in extracted_features.columns if (c_col.startswith('original') and '_shape_' not in c_col)]
print(np.random.choice(value_feature_names, 3), 'of', len(value_feature_names))

dataset = extracted_features[value_feature_names]

dataset.head()

"""#We now have dataset and labels"""

print(dataset.shape)
print(value_feature_names)
print(np.array(labels).shape)

"""#Proceed with cross validation (including feature selection and training/classification)


"""

...